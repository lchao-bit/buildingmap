Title         : Leaflet-Geohash地图展示技术报告
Bibliography: reference.bib


[TITLE]
# 动机  
&emsp;&emsp;目前使用leaflet[@leaflet2018]和OpenStreetMap[@OpenStreetMap]建立的地图，多数采用瓦片的形式来组织数据。在leafelt支持的瓦片格式中，地图数据的投影方式为球形魔卡托投影（Spherical Mercator），该投影方式在计算过程中使用了三角函数正切（tan）计算。从计算量方面讲，使用三角函数比不使用时要大很多，因此，考虑是否能够使用其他投影方式来代替魔卡托投影；另一方面，目前实验室正在进行以以太坊区块链[@Ethereum2014Whitepaper]为载体的地理信息存储工作，由于区块链智能合约编程语言的特点，在实际存储过程中采用Geohash[@Geohash]进行区域划分。因此，考虑是否能够以区块链作为地图展示的数据服务器，使得leaflet中地图索引的方式改为Geohash方式。

# 关键技术 
* leaflet是面向移动端交互式地图的主要开源JavaScript库。它的JS文件只有约38 KB，且拥有大部分开发人员需要的所有映射特性。 leaflet由于其出色的移动端交互式特性和轻量优势，使其得到了广泛的应用。  
* OpenStreetMap是一种开源的地图数据库，也是为世界创造和分发免费地理数据的项目。  
* Geohash是一套地理编码系统，它将一个地理位置编码成一串字母和数字。它的层次化空间数据结构将空间细分为网格形状，方便编码和查询。  
* GeoJSON[@GeoJSON]是一种用于编码各种地理数据结构的开放标准格式，用于表示简单的地理特征以及它们的非空间属性。
* 区块链（Blockchain）[@CBD2017blockchain]是一种在对等网络环境下，通过透明和可信规则，构建不可伪造、不可篡改和可追溯的链式数据结构，实现和管理事物处理的模式。
# 实现过程
## 区块链数据存储
&emsp;&emsp; 设计地图数据存储智能合约，按照OpenStreetMap数据格式，将原始地图数据逐条存入区块链中；在每条地图数据存入后，根据地图数据条目的经纬度范围计算对应Geohash值，并利用该值作为数据条目索引，方便查询；对后续存入的数据条目，除了根据范围计算Geohash值外，还要看该条目包含的经纬度点是否和前面的Geohash存在交集，若存在，则将条目同样绑定在相关Geohash块上。  
&emsp;&emsp; 设计地图数据读取智能合约，作为外部应用访问地图数据接口，实现根据地图Geohash范围查询对应地图数据功能；读取出来的地图数据按照leaflet中支持的GeoJSON格式进行重新编辑，方便leaflet现有GeoJSON接口直接调用。
## Leaflet相关
### 建立GeohashLayer
&emsp;&emsp; GeohashLayer是一个实现从区块链加载Geohash映射数据的基础类。在实现该类前，首先对基础map类中投影关系进行修改。将Leaflet中默认的投影方式球形魔卡托投影修改为符合Geohash地图投影关系的Simple方式，实现经纬度坐标到像素坐标的直接转换。  
&emsp;&emsp; GeohashLayer类中最关键的部分是地图更新函数_update。该函数通过计算将像素边界转换为经纬度边界,再通过函数addTilesFromCenterOut实现Geohash块对该经纬度边界的覆盖。  
&emsp;&emsp; addTilesFromCenterOut函数的功能是查找覆盖经纬度边界的对应Geohash块组，实现地图数据的覆盖显示。这里主要的功能是适当扩展经纬度边界范围，通过类似逐行扫描的方式计算扩展范围内所包含的子边界，并计算出子边界的Geohash值，再通过计算Geohash块邻居块的方式实现边界范围全覆盖。特别注意应根据当前地图缩放比例和Geohash块大小确定逐行扫描的步长尺度。所有计算出来的Geohash邻居块存放在一个queue数组当中，存入queue的Geohash块需要满足两个条件。条件1：不能与queue中已有数据重复；条件2：数据块不能在地图上重复加载。条件2通过leaflet中加载地图缓存功能来实现。这样降低了地图更新时对服务器的访问频率，减少了服务器数据访问量，提高显示速度。  
### 建立GeohashLayer.GeoJSON
&emsp;&emsp;GeohashLayer.GeoJSON主要功能是实现对区块链中Geohash映射地图数据访问和GeoJSON格式数据的组织以及对GeoJSON格式数据的显示工作，包括GeohashLayer.blockchain和GeohashLayer.GeoJSON两个类。  
* GeohashLayer.blockchain类是对GeohashLayer类的扩展，实现区块链中基于Geohash的原始地图数据访问和将原始数据进行GeoJSON格式组织两部分工作。在读取区块链中数据时，要注意区块链智能合约的异步访问方式。待异步访问数据结束后，再将结果统一送入GeoJSON格式组织函数中，这样才能保证对应Geohash块的全部数据都被读取完成。这里有几点说明：1.由于GeoJSON数据中不同类型地理信息对应不同的特征值，因此在读取原始地图数据时要注意按照类型进行区别；2. 由于区块链中不能存储浮点数，所有地图数据中的浮点数都是按照一定比例扩大后存储的，所以在读取数据时要注意按照约定比例进行缩小以得到原始值；3. 对区块链数据的访问是通过智能合约进行的，在GeohashLayer.GeoJSON中需要将对应参数传递进来；4. 由于leaflet本身有对加载数据的缓存功能，因此这里不需要对读取的区块链数据再次进行缓存。二次缓存不但占用本地内存空间，同时由于缓存顺序等问题会对地图显示产生影响。  
* GeohashLayer.GeoJSON类是对GeohashLayer.blockchain类的扩展，实现区块链访问参数传递、GeoJSON格式地图数据展示以及图层控制功能。该类为外部应用实现Geohash地图数据展示的接口，起到关键的承接作用。传递的参数包括区块链智能合约访问接口GeohashURL、地图缩放范围选项值options和GeoJSON格式地图数据显示选项值geojsonOptions三个。这里需要关注的是GeohashURL参数，该参数需要结合区块链数据访问的web3接口、区块链智能合约的访问框架TruffleContract和智能合约地址三部分，且需要设定区块链所在服务端的Http访问地址。这些参数都作为可变量放在外部进行传递，使得数据访问灵活易修改。  
# 后续工作
&emsp;&emsp;目前只是实现了最基础的功能，还有很多需要完善的地方。  
 1. 目前的地图显示以道路为实例进行展示，以后还需要将更完整的地图元素展示出来。  
 1. 由于道路数据中缺少对道路类型的描述，使得所有道路都按照一种样式进行展示，后续要丰富类型。  
 1. 目前只展示了一个缩放等级的地图数据，以后要将数据类型中的缩放等级进行丰富。  
 1. 可以对Geohash编码长度与地图缩放等级进行仔细推敲确认以实现更好的展示效果。  

[BIB]



