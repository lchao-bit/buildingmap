Title         : Leaflet-Geohash地图展示技术报告
Bibliography: reference.bib


[TITLE]
# 动机  
&emsp;&emsp;目前使用leaflet[@leaflet2018]和OpenStreetMap[@OpenStreetMap]建立的地图，多数采用瓦片的形式来组织数据。在leafelt支持的瓦片格式中，地图数据的投影方式为球形魔卡托投影（Spherical Mercator），该投影方式在计算过程中使用了三角函数正切（tan）计算。从计算量方面讲，使用三角函数比不使用时要大很多，因此，考虑是否能够使用其他投影方式来代替魔卡托投影；另一方面，目前实验室正在进行以以太坊区块链[@Ethereum2014Whitepaper]为载体的地理信息存储工作，由于区块链智能合约编程语言的特点，在实际存储过程中采用Geohash[@Geohash]进行区域划分。因此，考虑是否能够以区块链作为地图展示的数据服务器，使得leaflet中地图索引的方式改为Geohash方式。

# 关键技术 
* leaflet是面向移动端交互式地图的主要开源JavaScript库。它的JS文件只有约38 KB，且拥有大部分开发人员需要的所有映射特性。 leaflet由于其出色的移动端交互式特性和轻量优势，使其得到了广泛的应用。  
* OpenStreetMap是一种开源的地图数据库，也是为世界创造和分发免费地理数据的项目。  
* Geohash是一套地理编码系统，它将一个地理位置编码成一串字母和数字。它的层次化空间数据结构将空间细分为网格形状，方便编码和查询。  
* GeoJSON[@GeoJSON]是一种用于编码各种地理数据结构的开放标准格式，用于表示简单的地理特征以及它们的非空间属性。
* 区块链（Blockchain）[@CBD2017blockchain]是一种在对等网络环境下，通过透明和可信规则，构建不可伪造、不可篡改和可追溯的链式数据结构，实现和管理事物处理的模式。

# 实现过程
&emsp;&emsp;由于区块链或者geoserver服务器都可为浏览器提供数据支持，因此，在实现geohash地图展示时也要分为区块链服务和geoserver服务器服务两种进行。
## 数据服务
### 数据转换
&emsp;&emsp;无论是区块链数据服务还是geoserver数据服务，首先要考虑的都是geohash与经纬度转换时的问题。  

1. geohash编码长度问题。需要找到编码长度和代表范围以及地图缩放等级之间的对应关系。通过对比实验得到的geohash编码长度和缩放等级之间的对应关系如下表所示：  

~ Center
|---------|-----------------|
| zoom    | geohash编码长度 |
+---------|:---------------:+
| <=5     | 2               |
| [6,9]   | 4               |
| [10,13] | 5               |
| [14,16] | 6               |
| [17,18] | 7               |
| >18     | 8               |
|---------|-----------------|
{  }
~
2. 经纬度精度问题。在浏览器端进行地图元素显示时，需要将geohash值转换为经纬度点，因此，需要对转换后的精度进行判定。通过大量实验数据表明，当geohash编码长度为14时，其对应的经纬度精度为小数点后7位，与原始geojson数据中给定的经纬度精度一致。因此，在geohashjson内部对元素经纬度进行转换时，采用14位geohash完成。转换前后对比结果如下图所示。

### 区块链数据服务
&emsp;&emsp;区块链作为分布式数据存储载体，是geoserver服务器的延伸应用，减少数据访问时对服务器的依赖，同时保证数据的安全性。利用区块链提供数据服务，需要完成区块链中对地图数据的存取操作。  
&emsp;&emsp; 设计地图数据存储智能合约，按照OpenStreetMap数据格式，将原始地图数据按照元素划分、逐条存入区块链中；在每条地图数据存入后，根据地图数据条目的经纬度范围计算对应Geohash值，并利用该值作为数据条目索引，方便查询；对后续存入的数据条目，除了根据范围计算Geohash值外，还要看该条目包含的经纬度点是否和前面的Geohash存在交集，若存在，则将条目同样绑定在相关Geohash块上。  
&emsp;&emsp; 设计地图数据读取智能合约，作为外部应用访问地图数据的接口，实现根据地图Geohash范围查询对应地图数据功能；读取出来的地图数据按照leaflet中支持的GeoJSON格式进行重新编辑，方便leaflet现有GeoJSON接口直接调用。
### geoserver数据服务
&emsp;&emsp;geoserver可根据给定的geohash块和缩放等级提供对应geojson格式地图数据。需要完成如下内容：  

1.  geohash解码。在leaflet端给定geohash值后，geoserver需将该值重新计算成代表区域的一对经纬度点，再切分对应的地图数据。
1.  缩放等级。指定geohash编码长度和缩放等级之间的对应关系，方便数据切分。
1.  经纬度编码。geoserver在保存地图数据前要把数据中所有经纬度点编码为geohash再进行保存。

&emsp;&emsp;通过建立JS脚本，在geoserver端实现geojson2geohashjson功能，即可实现url访问geohashjson数据的要求。该服务需要apache配合完成，apache中的配置如下：  

1. 添加映射关系，将geohash标记为h。
```javascript
 RewriteRule "^/geoserver/h/([\d]+)/([\d]+)$" "http://localhost${hashurl:$1 $2}" [P,L,R=301]
```
通过类似上面代码，实现浏览器端对geohashjson数据的访问，访问格式为.../h/z/geohash，其中z为地图缩放等级。
2. 调用geojson_2_geohashjson-server.js文件时，参考
   
``` javascript
os.system('jq -c \'del(.features[].properties | .[]| select(.==null)) | del(.features[].id) |del(.features[].geometry_name)\' '+ jsontmp + '> ' + jsonname);
os.system('rm -f ' + jsontmp + ' >> /dev/null 2>&1');
```

## Leaflet相关
### 建立GeohashLayer
&emsp;&emsp; GeohashLayer是一个实现从区块链加载Geohash映射数据的基础类。

 * 在实现该类前，首先对基础map类中投影关系进行修改。osm的原始数据存储采用的是EPSG4326，而在提供tiles 和 the WMS webservice时采用的是EPSG3857。查看geoserver上提供的geojson数据可以看到，每个geojson数据块的开头部分都有如下内容：
``` javascript
"properties":{"name":"urn:ogc:def:crs:EPSG::4326"}
```
说明其原始数据采用的是EPSG4326。由于geohash编码后采用的数据为原始数据，因此，将Leaflet中默认的投影方式球形魔卡托投影修改为符合Geohash地图投影关系的EPSG4326方式，实现经纬度坐标到像素坐标的直接转换。  
 * GeohashLayer类中最关键的部分是地图更新函数_update。该函数通过计算将像素边界转换为经纬度边界,再通过函数addTilesFromCenterOut实现Geohash块对该经纬度边界的覆盖。  
 * addTilesFromCenterOut函数的功能是查找覆盖经纬度边界的对应Geohash块组，实现地图数据的覆盖显示。这里主要的功能类似逐行扫描的方式，从显示范围的一个角点开始，计算相邻且在覆盖范围内的所有geohash块，从而实现边界范围全覆盖。这里由于geohash块的编码长度根据地图缩放等级已经确定，所以在进行逐行扫描时不需要考虑步长，而是根据对应geohash长度的邻居进行计算，不会出现由于步长过大问题出现的两个geohash块之间的地图空隙，或步长过小出现geohash块过多的问题。由于所有计算出来的Geohash邻居块存放在一个queue数组当中，存入queue的Geohash块需要满足两个条件。  
&emsp;&emsp; 条件1：不能与queue中已有数据重复；  
&emsp;&emsp; 条件2：数据块不能在地图上重复加载。  
条件2通过leaflet中加载地图缓存功能来实现。这样降低了地图更新时对服务器的访问频率，减少了服务器数据访问量，提高显示速度。  
### 建立GeohashLayer.GeoJSON
&emsp;&emsp;GeohashLayer.GeoJSON主要功能是实现对区块链中Geohash映射地图数据访问和GeoJSON格式数据的组织以及对GeoJSON格式数据的显示工作，包括GeohashLayer.blockchain和GeohashLayer.GeoJSON两个类。  

 * GeohashLayer.blockchain类是对GeohashLayer类的扩展，实现区块链中基于Geohash的原始地图数据访问和将原始数据进行GeoJSON格式组织两部分工作。在读取区块链中数据时，要注意区块链智能合约的异步访问方式。待异步访问数据结束后，再将结果统一送入GeoJSON格式组织函数中，这样才能保证对应Geohash块的全部数据都被读取完成。这里有几点说明：  
  1. 区块链相关
    1. 由于GeoJSON数据中不同类型地理信息对应不同的特征值，因此在读取原始地图数据时要注意按照类型进行区别；  
    2. 由于区块链中不能存储浮点数，所有地图数据中的浮点数都是按照一定比例扩大后存储的，所以在读取数据时要注意按照约定比例进行缩小以得到原始值；
    3. 对区块链数据的访问是通过智能合约进行的，在GeohashLayer.GeoJSON中需要将对应参数传递进来；
    4. 由于leaflet本身有对加载数据的缓存功能，因此这里不需要对读取的区块链数据再次进行缓存。二次缓存不但占用本地内存空间，同时由于缓存顺序等问题会对地图显示产生影响。  
  1. geoserver相关
    1. 加载数据是通过geoserver服务器直接获取，则需要注意url访问方式的变化；
    1. 由于地图数据中所有经纬度点都转换为geohash值，因此在显示时需要对geohash值进行经纬度转换。
  
 * GeohashLayer.GeoJSON类是对GeohashLayer.blockchain类的扩展，实现区块链访问参数传递、GeoJSON格式地图数据展示以及图层控制功能。该类为外部应用实现Geohash地图数据展示的接口，起到关键的承接作用。传递的参数包括区块链智能合约访问接口GeohashURL、地图缩放范围选项值options和GeoJSON格式地图数据显示选项值geojsonOptions三个。这里需要关注的是GeohashURL参数，该参数需要结合区块链数据访问的web3接口、区块链智能合约的访问框架TruffleContract和智能合约地址三部分，且需要设定区块链所在服务端的Http访问地址。这些参数都作为可变量放在外部进行传递，使得数据访问灵活易修改。  

# 结果分析
1. 地图显示效果对比。下图为原始瓦片数据和geoserver提供的geohash地图显示效果图。
http://os.cs.tsinghua.edu.cn/GeoServer/vectormap/buildingmap/niuman/index-org-only_map.html
http://os.cs.tsinghua.edu.cn/GeoServer/vectormap/buildingmap/leaflet-geohash-geoserver/index-geohash-only_map.html
1. 性能分析-无缓存

~ Center
**tile 显示性能表**

|------|-------------------|----------------|------------------|------------------|
| zoom | tile-map-requests |transfer-size(MB)| tile-load-time (s)| tile-finish-time (s)|
+-----:+------------------:+---------------:+---------------:+------------------+
| 13   | 24            |4.5 |1.81         | 5.16          |
| 14   | 32            | 1.6|2.05       | 2.78           |
| 15   |  32                 | 0.693|            1.67   |           1.73      |
| 16   |  30               | 0.553|         1.05     |1.10                 |
| 17   |   24                | 0.432 |       0.793       |  0.839                |
|------|-------------------|----------------|------------------|----------------|
{  }
~

~ Center
**geohash显示性能表**

|--------------|--------------|--------------|--------------|----------------|
| zoom| geohash-map-requests|transfer-size(MB)| geohash-load-time(s)| geohash-finish-time(s)| 
+--------------:+------------:+--------------:+--------------:+--------------+
| 13   | 24            |4.3 |0.683         | 6.12        |
| 14   | 98            |1.3 |1.28        | 2.55          |
| 15   |  40                 | 0.588|     1.81          |     1.85             |
| 16   |   18                |0.356 |   1.21            | 1.31                 |
| 17   |     56              |0.476  |      0.842        |    1.41              |
|------|-------------------|----------------|------------------|----------------|
{  }
~

3. 性能分析-有缓存

~ Center
**tile 显示性能表**

|------|-------------------|----------------|------------------|------------------|
| zoom | tile-map-requests |transfer-size(MB)| tile-load-time (s)| tile-finish-time (s)|
+-----:+------------------:+---------------:+---------------:+------------------+
| 13   | 24            |0.0079 |3.82        | 4.67          |
| 14   | 32            | 0.0079| 2.44      |   2.53        |
| 15   |  32                 | 0.0079|   1.45      |   1.53     |
| 16   |  30               |0.0079 |   1.00         |     1.04          |
| 17   |   24                | 0.0079 |       0.726       |  0.768                |
|------|-------------------|----------------|------------------|----------------|
{  }
~

~ Center
**geohash显示性能表**

|--------------|--------------|--------------|--------------|----------------|
| zoom| geohash-map-requests|transfer-size(MB)| geohash-load-time(s)| geohash-finish-time(s)|
+--------------:+------------:+--------------:+--------------:+--------------+
| 13   | 24            |0.0081|   3.73      | 4.21      |13808|
| 14   | 98            |0.0081 |    2.46   |   2.52      |3355|
| 15   |  40                 | 0.0081|   1.60         |    1.66         |
| 16   |   18                | 0.0081|     1.05        |   1.15               |
| 17   |     56              |0.0081 |      1.04      |    1.08         |
|------|-------------------|----------------|------------------|----------------|
{  }
~

4. 总结  
  1. 上面的测试结果都在服务器端进行，但每组数据只进行了少量测试，未进行大量多次实验；且实验结果受网络传输条件等影响，实验结果会有一定波动。
  1. 由于在各个层级上瓦片数据和geohash数据加载的块数不同，且大部分都是geohash加载的数据块较多，所以存在传输和响应时间的差别。

[BIB]



